{{template "base" .}}

{{define "content"}}
<style>
    .custom-button {
        background-color: transparent; /* Set background to transparent */
        padding: 0; /* Remove padding */
        border-color: rgb(230, 230, 230);
        border-radius: 0.2rem;
        cursor: pointer; /* Add pointer cursor for interaction */
        display: flex; /* Use flexbox for aligning text and image */
        flex-direction: column; /* Stack text and image vertically */
        align-items: center; /* Center items horizontally */
        text-align: center; /* Center text horizontally */
        color: rgb(255, 255, 255); /* Text color */
        text-decoration: none; /* Remove underline (if it's a link) */
}
.btn-outline-pinkd {
    background-color: #ffffff;
    color: #DE3163;
    border-color: #DE3163;
}
.btn-pinkd {
    background-color: #DE3163;
    color: white;
}

.btn-check:checked+.btn {
    background-color: #DE3163;
    color: white;
    /* You can adjust other styles as needed */
}

.smallbutton {
    font-size: 8px;
}
</style>


<script charset="utf-8" src="https://static.line-scdn.net/liff/edge/versions/2.22.4/sdk.js"></script>
<div class="row text-center">
    <h1 style="font-family: 'Prompt'">รายการสินค้า</h1>
</div>
<!-- <div class="row">
    <h6 style="font-family: 'Prompt';margin-left:6px">ประกาศ: สำหรับการสั่งของออนไลน์ Monbarree จะหยุดการจัดส่งตั้งแต่วันที่ 27 ธันวาคม 2023 ถึงวันที่ 2 มกราคม 2024</h6>
</div> -->
<div class="container mt-2">
    
        <form id="filterForm" action="/filter" method="get" >
            <input  type="hidden" id="filterValue" name="filter" value="" />
            <div class="button-container" style="display: flex; flex-wrap: nowrap; overflow-x: scroll;">
                <button type="button" class="btn btn-outline-pinkd" id="All" onclick="setFilterValue('All')">
                  <span style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">All</span>
                </button>
                <button type="button" class="btn btn-outline-pinkd" id="Vegetable" onclick="setFilterValue('Vegetable')">
                  <span style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Vegetable</span>
                </button>
                <button type="button" class="btn btn-outline-pinkd" id="Fruit" onclick="setFilterValue('Fruit')">
                  <span style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Fruit</span>
                </button>
                <button type="button" class="btn btn-outline-pinkd" id="Food_Product" onclick="setFilterValue('Food_Product')">
                  <span style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Food Product</span>
                </button>
                <button type="button" class="btn btn-outline-pinkd" id="Non_Food_Product" onclick="setFilterValue('Non_Food_Product')">
                  <span style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Non Food Product</span>
                </button>
              </div>
            
        </form>
</div>
<br><br>
<!-- Cart modal -->
<div class="content" style="position: relative;">
    <div class="container mt-2">
        <div class="row row-cols-2 row-cols-md-2 row-cols-lg-3 g-3" id="product-list">
            {{range $index, $productData := .ProductData}}
            <div class="card">
                <div class="body" style="text-align: center;">
                    <img style="margin-top: 5px; border-radius: 0.5rem;" src="../static/image/{{.Product.ImageUrl}}" alt="..." width="150px" height="200px">
                </div>
                <div class="card-body" style="text-align: left;">
                    <h6 style="margin-bottom: 5px;" class="card-title">{{.Product.ProductName}}</h6>
                    <p style="margin-bottom: 5px;" class="card-text">ราคา: {{ (index .Option 0).Price }} บาท</p>
                    <p style="margin-bottom: 5px;" class="card-text"> ({{ (index .Option 0).ProductOptionName }})</p>
                    <button class="btn btn-outline-pinkd addToCartButton" type="button" value="{{$index}}" data-bs-toggle="modal" data-bs-target='#exampleModal-{{$index}}'>เพิ่มใส่ตะกร้า</button>
                </div>
            </div>
            {{end}}
            <!-- Repeat the above card structure for other cards -->
        </div>
    </div>
<!-- Modal -->

    {{range $index, $productData := .ProductData}}

    <div class="modal fade" id="exampleModal-{{$index}}" tabindex="-1" aria-labelledby="#exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog"  id="#modal-{{$index}}">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">เพิ่ม {{.Product.ProductName}}</span> ใส่ตะกร้า </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- <form id="selected-item-to-cart" method="post" class="need-validation"> -->
                    <div style="text-align: center;">
                        <img style="border-radius: 0.5rem;" src="../static/image/{{.Product.ImageUrl}}" class="modal-card-image-{{$index}} img-fluid" alt="">
                    </div>
                    <br>
                    {{.Product.ProductDescription}}
                    <div class="mb-3">
                        <br>
                        <input  hidden type="text" id="fruit_name" name="fruit_name" value="{{.Product.Id}}">
                        <div class="option-selected" role="group" aria-label="Basic radio toggle button group" id="data-fruit_option-{{$index}}" >
                            {{range $optionindex, $option := $productData.Option}}
                                <input type="radio" class="btn btn-check option-radio " data-product-id="{{.Product.Id}}" 
                                data-option_price="{{.Price}}" data-option-weight="{{.Weight}}" value="{{.Id}}" 
                                data-fruit_option="{{.ProductOptionName}}" id="btnradio-{{$index}}-{{$optionindex}}" 
                                autocomplete="off" name="fruit_option_{{.Product.Id}}"
                                {{if eq $optionindex 0}}checked="checked"{{end}}>
                                <label class="btn btn-outline-pinkd mx-2 option" for="btnradio-{{$index}}-{{$optionindex}}">{{.ProductOptionName}}</label>
                            {{end}}
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="quantity" class="form-label">จำนวน</label>
                        <div class="input-group">
                            <button type="button" class="btn btn-secondary" onclick="decrementQuantity('{{.Product.Id}}')">-</button>
                            <input type="text" class="form-control" id="quantity_{{.Product.Id}}" name="quantity_{{.Product.Id}}" value="1" >
                            <button type="button" class="btn btn-secondary" onclick="incrementQuantity('{{.Product.Id}}')">+</button>
                        </div>
                        <!-- <input type="number" class="form-control" id="quantity_{{.Product.Id}}" name="quantity_{{.Product.Id}}" value="1" min="1" max="10" data-product-id="{{.Product.Id}}"> -->
                    </div>
                    <div class="mb-3 total_price">
                        <label for="Price" class="form-label ">ราคาทั้งหมด: <span id="totalPrice-{{.Product.Id}}"> </label>
                    </div>

                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ปิด</button>
                    <!-- <button type="submit" class="btn btn-primary addToCart">Buy now</button> -->
                    <button class="btn btn-pinkd addToCart" id="addtocart-{{.Product.Id}}"  data-bs-dismiss="modal" 
                            onclick="addToCart('{{.Product.Id}}','{{.Product.ProductName}}','{{.Product.ProductDescription}}')">เพิ่มใส่ตะกร้า</button>
                </div>
                    <!-- </form> -->
            </div>
        </div>
    </div>


    {{end}}

    <div class="shopping-cart fixed" style="position: fixed; right: 40px; top: 600px ; background-color: #DE3163; border-radius: 0.5rem;padding: 0;margin: 0;" id="cartdata">
        <button data-bs-toggle="modal" data-bs-target="#cartModal" class="custom-button">
            <p style="color: black;padding: 0;margin: 0; font-family: Prompt;">ตะกร้า<p>
            <img src="../static/image/cart.png" width="40px" height="40px" alt="Custom Cart Image" style="padding: 0;margin: 0;">
        </button>
    </div>

    <div id="cartModal" class="modal fade" tabindex="-1" aria-hidden="true" style="font-family: Prompt;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">ตะกร้าของฉัน</h5>
                    <button type="button" class="btn btn-pinkd" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-5">รายการ</div>
                        <div class="col-3" style="text-align: center;">จำนวน</div>
                        <div class="col-2" style="text-align: center;">ราคา</div>
                        <div class="col-2"></div>
                    </div>
                    <ul id="cart" class="list-group" style="font-size: 12px;">
                        <!-- Cart items will be displayed here -->
                    </ul>
                    <br>

                    <p style="font-size: 12px;">น้ำหนักทั้งหมด:<span id="total-weight">0</span> กิโลกรัม</p>
                    <p style="font-size: 12px;">ราคา: <span id="total">0</span> บาท</p>
                    <br>
                    <p style="color: gray;font-size: 12px;text-decoration: underline;">หมายเหตุ</p>
                    <p style="color: gray;font-size: 10px;">(กล่องไซส์ S น้ำหนักสินค้า 0 - 5 กิโลกรัม)   170 บาท</p>
                    <p style="color: gray;font-size: 10px;">(กล่องไซส์ M น้ำหนักสินค้า 5 - 8 กิโลกรัม)  190 บาท</p>
                    <p style="color: gray;font-size: 10px;">(กล่องไซส์ L น้ำหนักสินค้า 8 - 15 กิโลกรัม) 225 บาท</p>
                    
                </div>

                <div class="modal-footer">
                    <form id="checkout-form" action="/summary" method="post">
                        <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">

                        <input type="hidden" id="cart-data" name="cart-data" value="...">
                        <button  class="btn btn-pinkd" data-bs-dismiss="modal" id="button-next" type="submit" >ถัดไป</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


{{end}}

{{define "js"}}


<script>

    function decrementQuantity(productId) {
        var quantityElement = document.getElementById("quantity_" + productId);
        var currentQuantity = parseInt(quantityElement.value, 10);

        if (currentQuantity > 1) {
            quantityElement.value = currentQuantity - 1;
            console.log(quantityElement.value,productId)
            updateTotalPrice(productId);
        }
    }

    function incrementQuantity(productId) {
        var quantityElement = document.getElementById("quantity_" + productId);
        var currentQuantity = parseInt(quantityElement.value, 10);
        var maxQuantity = 100; // Set your maximum quantity here
        if (currentQuantity < maxQuantity) {
            quantityElement.value = currentQuantity + 1;
            console.log(quantityElement.value,productId)
            updateTotalPrice(productId);
        }
    }



    document.querySelectorAll('.addToCartButton').forEach(function(button) {
        button.addEventListener('click', function() {
            var card = this.closest('.card');
            var cardTitle = card.querySelector('.card-title').textContent;
            document.getElementById('fruit_name').value = cardTitle;
        });
    });

    // for change option
    document.querySelectorAll('.option-radio').forEach(function(radioButton) {
    radioButton.addEventListener('change', function() {
        // This function will be triggered when a radio button is selected.
        var productId = this.getAttribute("data-product-id")

        const selectedValue = this.getAttribute('data-option_price');
        var quantity = document.getElementById("quantity_" + productId).value;
        const totalPrice = selectedValue * quantity;
        if (totalPrice!=null){
            document.getElementById('totalPrice-'+productId).textContent = totalPrice;
        }
        console.log(quantity)
        });
    });


    function updateTotalPrice(productId) {
        var quantity = parseFloat(document.getElementById("quantity_" + productId).value);
        var x = document.querySelector('input[name=fruit_option_' + productId + ']:checked');

        if (x) {
            var selectedOption = parseFloat(x.getAttribute('data-option_price'));
            var totalPrice = quantity * selectedOption;
            document.getElementById('totalPrice-' + productId).textContent = totalPrice;
        }
    }
</script>

<script>


    // this script for cart function
        let total = 0;
        let total_weight = 0;
        let cartData = localStorage.getItem('myCart');
        let cart = cartData ? JSON.parse(cartData) : [];
        console.log("my cart data is " + cart)
        function addToCart(productId, productName,productDescription) {
            // Update your cart or perform other actions
            var optionPrice = document.querySelectorAll('input[name="fruit_option_' + productId + '"]:checked')[0].getAttribute('data-option_price');
            var optionWeight = document.querySelectorAll('input[name="fruit_option_' + productId + '"]:checked')[0].getAttribute('data-option-weight');
            var optionName = document.querySelectorAll('input[name="fruit_option_' + productId + '"]:checked')[0].getAttribute('data-fruit_option');
            var optionId = document.querySelectorAll('input[name="fruit_option_' + productId + '"]:checked')[0].value
            console.log(optionId,optionWeight)
            quantity = document.getElementById('quantity_'+productId).value
            productName_productOption = productName+"("+optionName+")"

            price = optionPrice*quantity
            weight = optionWeight*quantity

            total_weight +=weight
            total += price;
            cart.push({ id:productId,optionId:optionId, name: productName_productOption,product_description:productDescription, quantity:parseInt(quantity), total_price: price, weight:weight,total:total,total_weight:total_weight })
            console.log(cart)
            updateCart()
            
            // Rest of your code
        }

        // function appearbutton(productId){
        //     var addcartbutton = document.getElementById('addtocart-' + productId);
        //     if (addcartbutton) {
        //         // Show the element by removing the 'hidden' attribute
        //         addcartbutton.removeAttribute('hidden');
        //     }
        // }

        function updateCart() {
            const cartList = document.getElementById('cart');
            cartList.innerHTML = ''; // Clear previous items
            let total = 0;
            let total_weight = 0;
            cart.forEach((item, index) => {

            total_weight +=item.weight
            total += item.total_price;

            //update back to item
            item.total = total
            item.total_weight = total_weight
            // Create a row (Bootstrap row) for each item
            const row = document.createElement('div');
            row.classList.add('row');

            // Create a column for the item name
            const itemColumn = document.createElement('div');
            itemColumn.classList.add('col-5');
            itemColumn.textContent = item.name;
            row.appendChild(itemColumn);

            // Create a column for the item quantity
            const quantityColumn = document.createElement('div');
            quantityColumn.classList.add('col-3');
            quantityColumn.style.textAlign = 'center';
            quantityColumn.textContent = item.quantity;
            row.appendChild(quantityColumn);

            // Create a column for the item price
            const priceColumn = document.createElement('div');
            priceColumn.classList.add('col-2');
            priceColumn.style.textAlign = 'center';
            priceColumn.textContent = `${item.total_price} -`;
            row.appendChild(priceColumn);

            // Create a column for the remove button
            const removeColumn = document.createElement('div');
            removeColumn.classList.add('col-2');
            const removeBtn = document.createElement('button');
            removeBtn.innerHTML = '&times;';
            removeBtn.classList.add ('close');
            removeBtn.classList.add('btn', 'btn-pinkd');
            removeBtn.classList.add('smallbutton');

            removeBtn.onclick = () => removeItem(index);
            removeColumn.appendChild(removeBtn);
            row.appendChild(removeColumn);

            // Add the row to the cart list
            cartList.appendChild(row);
            });
            console.log(cart.length)
            if (cart.length === 0) {
                var addcartbutton = document.getElementById('button-next');
                var cartbutton = document.getElementById('cartdata');
                if (addcartbutton) {
                    // Show the element by removing the 'hidden' attribute
                    addcartbutton.style.display = 'none'
                    cartbutton.style.display = 'none'
                }
            } else {
                    var addcartbutton = document.getElementById('button-next');
                    var cartbutton = document.getElementById('cartdata');
                    
                    if (addcartbutton) {
                        // Hide the element by adding the 'hidden' attribute
                        addcartbutton.style.display = 'block'
                        cartbutton.style.display = 'block'
                    }
            }
            document.getElementById('total-weight').textContent = total_weight/1000;
            document.getElementById('total').textContent = total;
            document.getElementById('cart-data').value = JSON.stringify(cart);
            localStorage.setItem('myCart', JSON.stringify(cart));
        }

        function removeItem(index) {
            cart.splice(index, 1);
            updateCart();
        }


    // for change header text
    function changeText() {
        const dynamicText = document.getElementById("dynamicText");
        dynamicText.textContent = "คุณ {{.User.FirstName}} (credit:{{.User.AmountRemain}} THB)" ;// Change the text
    }

    // Call the function when the page is fully loaded
    window.addEventListener("load", changeText());
    window.addEventListener("load", updateCart());

</script>

<script>

        function checkAndChangeButtonColor() {
                    // Example condition: Change color if the filter type is 'Fruit'
                    // Replace this with your actual condition
                    console.log('{{.Data.Filter}}')
                    button =  document.getElementById('{{.Data.Filter}}')
                    if (button) {
                        button.classList.add('btn-pinkd'); 
                        button.classList.remove('btn-outline-pinkd');
                    }
        }
        function setFilterValue(value) {
            document.getElementById('filterValue').value = value;
            document.getElementById('filterForm').submit();
        }
    
        document.addEventListener('DOMContentLoaded', function() {
        checkAndChangeButtonColor();
        });

</script>

{{end}}
